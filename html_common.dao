load lib import lib
load web.html import html
load config import configuration
load translations import translation
load time import time

namespace html_content {
  LocalRefs, html_local_refs,
  html_head, html_top_stripe, html_footer,
}

type LocalRefs = enum<
  home,
  about,
  schedule,
  cfp,
  gallery,
  contact,
  talks,
  workshops,
>

# FIXME $schedule
var html_local_refs: map<LocalRefs, tuple<
    # logical name of the page (real page names are in `pages')
    page:string,
    # real html id attribute
    id:string>> = {
  $home      -> ('home',      ''),
  $about     -> ('about',     ''),
  $schedule  -> ('home',      'schedule'),
  $cfp       -> ('home',      'cfp'),
  $gallery   -> ('gallery',   ''),
  $contact   -> ('contact',   ''),
  $talks     -> ('talks',     ''),
  $workshops -> ('workshops', ''),
}

routine html_footer(invar trans: Locale, invar dst: string) => string {
  # just convenient shortcuts
  invar t = translations[trans]

  rel = routine(invar target: string) { return mkrel(dst, target) }

  return fragment {
    div(id='footer') {
      paragraph { t['footer'] }
    }

    div(id='partners') {
      #h3(_class='section') { t['partners'] }
      # FIXME distinguish $general and $main
      paragraph {
        for (invar p in partners) {
          anchor(href=p.uri) {
            img(_class='partner', src=rel(p.img), alt=p.name, title=p.name)
          }
        }
      }

      script {
@[]
var $ul = $('#partners > p');
$('a', $ul).sort(function(){
   return ( Math.round( Math.random() ) - 0.5 )
}).appendTo($ul);
@[]
      }
    }
  }
}

routine html_head(
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>) => string {
  # just convenient shortcuts
  invar cu = conf.uri
  invar t = translations[trans]

  rel = routine(invar target: string) { return mkrel(dst, target) }

  # FIXME add </link> element for feeds (RSS...)

  return fragment {
    head {
      title { t['title'] }
      # convenient for relative URLs (see http://www.ietf.org/rfc/rfc1808.txt)
      base(href=conf.base_uri)
      # FIXME why charset must be separately from http_eqiv?
      meta(charset='utf-8')
      meta(http_equiv=$content_type, content='text/html')
      meta(name='viewport', content='width=device-width')
      meta(name='Keywords', content=conf.meta_keywords)
      meta(name='Description', content=conf.meta_description)
      # not HTML5-compliant
      text('<meta http-equiv="Expires" content="0">')

# FIXME
@[]
  <meta charset="utf-8" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="description" content="" />
  <meta name="keywords" content="" />
  <meta name="author" content="www.webwings.cz" />
  <meta name="robots" content="follow,all" />
  <meta name="copyright" content="(C) 2014 Webwings" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <title>Naši pedagógovia | Dúhová škôlka</title>
  <link rel="shortcut icon" href="/custom/images/favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" media="screen,projection,tv" type="text/css" href="/custom/css/style.css?v=1" />
@[]
      # Firefox, Chrome, Safari, IE 11+ and Opera (PNG 196x196 px)
      link(rel=$icon, _type=conf.favicon196.mime, href=rel(conf.favicon196.path))
      # Touch Icons - iOS, Android 2.1+, Blackberry (PNG 180x180 px)
      text('<link rel="apple-touch-icon-precomposed" href="' +
           rel(conf.favicon180.path) + '">')
      link(rel=$stylesheet, _type='text/css', href=rel(cu.css))
      link(rel=$alternate, _type='application/rss+xml',
           href=rel(dst + '/' + pages['feed_rss']))

      script(_type='text/javascript', src=rel(cu.jquery1)){}
    }
  }
}

routine html_top_stripe(
    invar page_name: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>) => string {
  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { return mkrel(dst, target) }

  return fragment {
    div(id='top_stripe') {
      nav(_class='segment') {
        for (ref in {
            html_local_refs[$home],
            #html_local_refs[$about],
            #html_local_refs[$schedule],
            html_local_refs[$talks],
            html_local_refs[$workshops],
            html_local_refs[$gallery],
            html_local_refs[$contact], }) {
          current = ref[0] == page_name
          ref1 = %ref[1] ? '#' + ref[1] : ''
          anchor(
              _class='page_link' + (current ? ' page_link_selected' : ''),
              href= current ? ref1 : rel(
                  dst + '/' + pages[ref[0]] + ref1) ) {
            t[%ref[1] ? ref[1] : ref[0]]
          }
        }
      }

      div(_class='segment') {
        #anchor(_class='ext_link', href=rel(dst + '/' + pages['feed_rss'])) {
        anchor(_class='ext_link', href=rel(cu.feed)) {
          img(src=rel(ci.feed), alt=t['feed'], title=t['feed'])
        }
        anchor(_class='ext_link', href=rel(cu.diaspora)) {
          img(src=rel(ci.diaspora), alt=t['diaspora'], title=t['diaspora'])
        }
        anchor(_class='ext_link', href=rel(cu.twitter)) {
          img(src=rel(ci.twitter), alt=t['twitter'], title=t['twitter'])
        }
        anchor(_class='ext_link', href=rel(cu.gplus)) {
          img(src=rel(ci.gplus), alt=t['gplus'], title=t['gplus'])
        }
        anchor(_class='ext_link', href=rel(cu.fb)) {
          img(src=rel(ci.fb), alt=t['fb'], title=t['fb'])
        }
      }

      div(_class='segment') {
        i = 0
        for (invar lang in translations) {
          if (i)
            text(' / ')
          else
            ++i

          lang_str = ((string)lang[0])[1:]
          if (lang[0] == trans)
            strong(_class='lang_link') { lang_str }
          else
            anchor(_class='lang_link',
                href='../' + lang_str + '/' + pages[page_name]) { lang_str }
        }
      }
    }

    if (time.now().add(days=-1) > conf.time_to) {
      paragraph(_class='urgent') { t['warn_past_annual'] }
    }
  }
}
