#FIXME partners - block
#FIXME news - add them!
#FIXME links to Androd and Sailfish APPs
#FIXME add stripes over participants' photos
#FIXME add year under the the header under the black stripe
#      before the stripe? and then using CSS to the right place
#FIXME rewrite the table generation in schedule using paragraphs in cells

# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content

namespace iar { visitor_home }

routine visitor_home(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>,
    invar groups: IarGroup) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }
  rel2 = routine(invar ref: LocalRefs) => string {
    tup = html_local_refs[ref]
    return mkrel(dst, dst + '/' + pages[tup[0]]) +
      (%tup[1] ? '#' + tup[1] : '')
  }

  # FIXME html module should somehow allow (temporary) nested subdocuments
  #   creation or transitive code section calls through functions
  #   i.e. basically running fragment{} from document{}
  _html_top_stripe = html_top_stripe(groups, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    html_head(trans, dst, pages)

    body {
      text(_html_top_stripe)

      div(id='header') {
        div(id='header_inner') {
          img(src=rel(ci.logo_oa_conf),
              alt=t['logo_oa_conf'], title=t['logo_oa_conf'])

          if ( ((DateTimeX)my_time.time.now()).add(days=-1) > conf.time_to )
            paragraph { t['motivation_thanks'] }
          else
            paragraph { t['motivation'] }

          paragraph(_class='time_range_big') {
            localized_time_format(
              t['_locale'], conf.time_from, '%-d.') + '&ndash;' +
            localized_time_format(
              t['_locale'], conf.time_to, '%-d. %B %Y')
          }

          div(id='main_buttons') {
            anchor(href=cu.reg_visitor) { t['visitor_register'] }
            if (my_time.time.now() <= conf.time_reg_end) {
              anchor(href=cu.reg_tip, title=t['visitor_register_tip_tooltip']) {
                t['visitor_register_tip']
              }
            }
          }

          paragraph { t['visitor_asterisk1'] }
        }
      }

      if ( ((DateTimeX)my_time.time.now()).add(days=-1) > conf.time_to ) {
        div(id='thanks') {
          h3(_class='section') { t['thanks'] }
          #paragraph(_class='narrow_paragraph') { t['thank_you'] }
          paragraph(_class='narrow_paragraph') { 'Ma tady tato sekce s podekovanim vubec byt? Na hlavni strance totiz jiz jedno celkove, velke podekovani mame.' }
        }
      }

      div {
        h3(_class='section') { t['conference'] }
        paragraph(_class='narrow_paragraph') { t['conference_about_content'] }
      }

#      div(id='social_networks') {
#        #h3(_class='section') { t[''] }
#        h3(_class='section') { 'Novinky ze socialnich siti' }
#        #paragraph(_class='narrow_paragraph') { t[''] }
#        paragraph(_class='narrow_paragraph') { 'V teto sekci budou blbiny ze socialnich siti.' }
#      }

#      div {
#        h3(_class='section') { t['contact'] }
#        paragraph(_class='narrow_paragraph') { t['contact_openalt_content'] }
#      }

      text(_html_footer)
    }
  })
}
