#FIXME partners - block
#FIXME news - add them!
#FIXME links to Androd and Sailfish APPs
#FIXME add stripes over participants' photos
#FIXME add year under the the header under the black stripe
#      before the stripe? and then using CSS to the right place
#FIXME rewrite the table generation in schedule using paragraphs in cells

# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content

namespace iar { partner_home }

routine partner_home(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>,
    invar groups: IarGroup) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }
  rel2 = routine(invar ref: LocalRefs) => string {
    tup = html_local_refs[ref]
    return mkrel(dst, dst + '/' + pages[tup[0]]) +
      (%tup[1] ? '#' + tup[1] : '')
  }

  # FIXME html module should somehow allow (temporary) nested subdocuments
  #   creation or transitive code section calls through functions
  #   i.e. basically running fragment{} from document{}
  _html_top_stripe = html_top_stripe(groups, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    html_head(trans, dst, pages)

    body {
      text(_html_top_stripe)

      div(id='header') {
        div(id='header_inner') {
          img(src=rel(ci.logo_oa_conf),
              alt=t['logo_oa_conf'], title=t['logo_oa_conf'])

          if ( ((DateTimeX)my_time.time.now()).add(days=-1) > conf.time_to )
            paragraph { t['motivation_thanks'] }
          else
            paragraph { t['motivation'] }

          paragraph(_class='time_range_big') {
            localized_time_format(
              t['_locale'], conf.time_from, '%-d.') + '&ndash;' +
            localized_time_format(
              t['_locale'], conf.time_to, '%-d. %B %Y')
          }

          div(id='main_buttons') {
            anchor(href=t['partner_register_mailto']) { t['partner_register'] }
          }
        }
      }

      # dummy div to move stripe colors by one
      #div(_class='dummy_section') { }

      div(_class='section_partners') {
        h3(_class='section') { t['partners'] }
      }
      div(_class='dummy_section') { }
      div {
        #paragraph(_class='narrow_paragraph') {
        div(_class='narrow_paragraph partner_levels') {
          partners_on_level = routine(invar level: PartnerLevel) => string {
            res = ''

            # FIXME some typing error
            #partners.iterate { [p]
            for (p in partners) {
              if (p.level == level) {
                res += (string)anchor(href=p.uri) {
                  img(_class='partner partner_' + ((string)level)[1:],
                      src=rel(p.img), alt=p.name, title=p.name)
                }
              }
            }

            return res
          }

          if (partners.find { X.level == $general } != none) {
            h4 { t['general'] }
            partners_on_level($general)
          }
          h4 { t['gold'] }
          partners_on_level($gold)
          h4 { t['silver'] }
          partners_on_level($silver)
          h4 { t['bronze'] }
          partners_on_level($bronze)
          h4 { t['supporter'] }
          partners_on_level($supporter)
        }
      }

      text(_html_footer)
    }
  })
}
