# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content

namespace iar { partner_benefits }

routine partner_benefits(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>,
    invar groups: IarGroup) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }

  # FIXME it should be somehow allowed to run fragment{} from document{}
  _html_top_stripe = html_top_stripe(groups, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    html_head(trans, dst, pages)

    body {
      text(_html_top_stripe)

      div {
        h3(_class='section') { 'Co Vám můžeme nabídnout' }
        paragraph(_class='narrow_paragraph') { '
Tím, sponzorování této události, obdržíte značné expozici a dosáhnout
špičkové technické lidi z celého světa.

Očekáváme, že mezi 200 a 300 účastníků, včetně bezplatných
softwarových profesionálů a nadšenců, jako jsou vývojářů, překladatelů,
projektanty, a dalšími členy komunity, zástupci firem, novináři,
studenty a pedagogy z celého světa.

OpenAlt je událost, kde mnoho jasných setkávají lidé v otevřené a
tvůrčí atmosféře, tvrdě pracovat, řešit bezprostředních problémů a
přicházet s novými nápady a řešeními pro budoucnost.

Vaše výhody jako sponzor OpenAlt
Seznamte klíčových osob - Seznamte se s klíčovou KDE a Qt
přispěvatelů, vzestupné a sestupné správcům a uživatelům jednoho z
předních světových uživatelského rozhraní technologických platforem.
Pronájem nejlepších talentů - KDE přitahuje některé z nejlepších
technických lidí na světě. Sponzoři mají možnost nábor nebo získat
mindshare.
Seznamte se s další přední hráči - Kromě KDE komunity, mnoho
dalších projektů svobodného softwaru a společnosti podílet na OpenAlt.
Inspirujte se - OpenAlt poskytuje vynikající prostředí pro
získávání zpětné vazby o nových produktech, a pro brainstorming nové
nápady.
Vliv budoucí plány produktů - Na OpenAlt, projekt KDE určuje směr
pro nadcházející měsíce. Toto je vaše šance být mezi prvními, kdo se
dozví o těchto plánů, aby diskutovali a ovlivňovat je.
Být vidět - Sponzorování vám dává cenné propagační možnosti, jako
je například reklama, významných jednáních, a mezinárodní tiskové
pokrytí.
Podporovat free software technologie - Můžete podpořit vývoj
nových aplikací, které se konají v OpenAlt hackfests a intenzivní
kódování zasedání.
Podpora volného softwaru - Ty budou uznány a vychutnat publicity
jako sponzor akce. Jak je důležitější, budete také podporu zdarma a
open source software, projekt KDE a ideály, které jsou založeny na.
Staňte se součástí KDE Společenství - KDE je jedním z největších
zdarma a open source software komunit na světě. Je to kooperativní,
spáchal a dynamické, fun-milující, kreativní a tvrdě pracující. Chcete
-li lidí spojených s KDE, to je konečný výraz komunity. Budete mít
přímý přístup k magické omáčkou, která dělá KDE tak účinné.

Přidejte se k nám pomoci, aby tato událost za úspěch!

Další informace naleznete v možnosti sponzorování brožuru pro úplné
podrobnosti o dostupných možnostech.

Máte-li zájem o více informací nebo si chcete diskutovat o
sponzorování, kontaktujte prosím OpenAlt sponzorskou tým.

Sponzoři jsou rozhodující pro úspěch OpenAlt."
'
        }
      }

      text(_html_footer)
    }
  })
}

routine workshops(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }

  # FIXME it should be somehow allowed to run fragment{} from document{}
  _html_head = html_head(trans, dst, pages)
  _html_top_stripe = html_top_stripe($partner, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    text(_html_head)

    body {
      text(_html_top_stripe)

      div {
        h3(_class='section') { t['workshops'] }

        if (my_time.time.now() >= conf.time_show_sched) {
          div(id='workshops') {

            div(_class='track_tips') {
              h4        { t['track_tips'] }
              paragraph { t['track_tips_desc'] }
              for (e in events_satisfying(participants, $workshop, $tips)) {
                div(_class='event') {
                  paragraph(_class='event_title') { e.event.trans[trans].name }
                  paragraph(_class='participant_name') { e.name }
                  paragraph(_class='event_desc') {
                    e.event.trans[trans].description
                  }
                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
                }
              }
            }

            div(_class='track_world_around') {
              h4        { t['track_world_around'] }
              paragraph { t['track_world_around_desc'] }
              for (e in events_satisfying(participants, $workshop, $world_around)) {
                div(_class='event') {
                  paragraph(_class='event_title') { e.event.trans[trans].name }
                  paragraph(_class='participant_name') { e.name }
                  paragraph(_class='event_desc') {
                    e.event.trans[trans].description
                  }
                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
                }
              }
            }

            div(_class='track_security') {
              h4        { t['track_security'] }
              paragraph { t['track_security_desc'] }
              for (e in events_satisfying(participants, $workshop, $security)) {
                div(_class='event') {
                  paragraph(_class='event_title') { e.event.trans[trans].name }
                  paragraph(_class='participant_name') { e.name }
                  paragraph(_class='event_desc') {
                    e.event.trans[trans].description
                  }
                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
                }
              }
            }

            div(_class='track_challenges') {
              h4        { t['track_challenges'] }
              paragraph { t['track_challenges_desc'] }
              for (e in events_satisfying(participants, $workshop, $challenges)) {
                div(_class='event') {
                  paragraph(_class='event_title') { e.event.trans[trans].name }
                  paragraph(_class='participant_name') { e.name }
                  paragraph(_class='event_desc') {
                    e.event.trans[trans].description
                  }
                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
                }
              }
            }

            div(_class='track_establishment') {
              h4        { t['track_establishment'] }
              paragraph { t['track_establishment_desc'] }
              for (e in events_satisfying(participants, $workshop, $establishment)) {
                div(_class='event') {
                  paragraph(_class='event_title') { e.event.trans[trans].name }
                  paragraph(_class='participant_name') { e.name }
                  paragraph(_class='event_desc') {
                    e.event.trans[trans].description
                  }
                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
                }
              }
            }

          }
        }
        else {
          #paragraph { t['workshops_empty'] }
        }
      }

      text(_html_footer)
    }
  })
}
