# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content

namespace iar { visitor_program }

routine visitor_program(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>,
    invar groups: IarGroup) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }

  # FIXME it should be somehow allowed to run fragment{} from document{}
  _html_top_stripe = html_top_stripe(groups, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    html_head(trans, dst, pages)

    body {
      text(_html_top_stripe)

      # dummy div to move stripe colors by one
      div(style='margin: 0; padding: 0; height: 0') { }
      div(style='margin: 0; padding: 0; height: 0') { }

#      if (my_time.time.now() >= conf.time_show_sched) {
        div(id='schedule') {
          h3(_class='section') { t['schedule'] }

          # construct reversed event mappings
          # FIXME do it using SQL (just use the built-in sqlite module)

          # FIXME remove casting
          places = (map<string, int>){->}
          days = (map<my_time.time::DateTime, map<
                  my_time.time::DateTime, map<string, @T>
                  >>){->}
          participants.iterate { [p]
            p.events.iterate { [ev]
              if (ev.kind != $party) {
                # rank ~ number of occurences
                if (ev.trans[trans].place in places)
                  ++places[ev.trans[trans].place]
                else
                  places[ev.trans[trans].place] = 1
              }

              day = my_time.time.make(ev.from.year, ev.from.month, ev.from.day)
              # each day separately
              if (day not in days)
                days[day] = {->}
              # each event
              if (ev.from not in days[day])
                days[day][ev.from] = {->}
              # each place
              if (ev.trans[trans].place not in days[day][ev.from])
                days[day][ev.from][ev.trans[trans].place] = (author=p, event=ev)
              else
                io.stderr.writeln('WARN >1 events at a venue',
                    ev.trans[trans].place, 'at time', ev.from)
            }
          }

          # adjust reverse mappings

          orig_ind = 0
          places2 = places.collect {
            (orig_ind = 0, id = X, rank = Y)
          } .sort {
            X.id > Y.id
          } .apply {
            # FIXME imitate stable sort by remembering the index
            X.orig_ind = ++orig_ind
            return X
          } .sort {
            if (X.rank == Y.rank)
              return X.orig_ind > Y.orig_ind
            else
              return X.rank > Y.rank
          }

          day_sets = routine(m: map<my_time.time::DateTime, map<string, @T>>)
              => list<tuple<kind: enum, cell_lines: list<list<@T>>>> {

            res = (list<tuple<kind: enum, cell_lines: list<list<@T>>>>){}
            last_event: none|@T = none

            m.keys().sort().iterate { [time_point]
              m[time_point].iterate { [place, cell]
                if (last_event != none && (
                    (last_event.kind == $party && cell.event.kind == $party) ||
                    (
                    # all non-party events are in the same cluster
                    last_event.kind != $party && cell.event.kind != $party)
                )) {
                  if (last_event.from == cell.event.from)
                    res[-1].cell_lines[-1].append(cell)
                  else
                    res[-1].cell_lines.append({cell})
                }
                else {
                  res.append( (kind=cell.event.kind, cell_lines={{cell}}) )
                }

                last_event = cell.event
              }
            }

            return res
          }

          # create tables and paragraphs from the reversed mappings

          days.keys().sort().iterate { [day]
            paragraph {
              # FIXME %A causes sigsegv
              #localized_time_format(t['_locale'], day, '%A %-d. %-m. %Y')
              day.format('%-d. %-m. %Y')
            }

            day_sets(days[day]).iterate { [set]
              if (set.kind == $party) {
                set.cell_lines.iterate { [cell_line]
                  cell_line.iterate { [cell]
                    div {
                      paragraph { cell.event.from.format('%H:%M') }
                      paragraph { cell.event.trans[trans].name }
                      paragraph { cell.event.trans[trans].description }
                      paragraph { cell.event.trans[trans].requirements }
                      paragraph { cell.event.trans[trans].place }
                    }
                  }
                }
              }
              else {
                table {
                  tr { th {}; places2.iterate { [place] th { place.id } } }

                  set.cell_lines.iterate { [cell_line]
                    tr {
                      # there is at least 1 cell
                      td { cell_line[0].event.from.format('%H:%M') }

                      cell_line.iterate { [cell]
                        # tight-loop to preserve order
                        places2.iterate { [place]
                          if (place.id == cell.event.trans[trans].place) {
                            td {
                              span { cell.event.trans[trans].name }
                              span { cell.author.name }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
#      }

      put_event = routine(invar e: tuple<name:string, event:Event>) {
        return div(_class='event') {
          paragraph(_class='event_title') { e.event.trans[trans].name }
          paragraph(_class='participant_name') { e.name }
          paragraph(_class='event_desc') {
            e.event.trans[trans].description
          }

          if (e.event.kind == $workshop) {
            paragraph(_class='participation_reqs') { t['participation_reqs'] }
            paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
          }

          # icons
          anchor(href=e.event.uri.video_rec, _class=
                 # FIXME none would mean not outputting this attribute
                 # FIXME enhance the ternary operator with none (because we already have automatical none-removal while evaluating)
                 %e.event.uri.video_rec ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.video), alt=t['video_rec'],
                title=t['video_rec'])
          }
          anchor(href=e.event.uri.presentation, _class=
                  %e.event.uri.presentation ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.doc_pdf), alt=t['presentation'],
                title=t['presentation'])
          }
          anchor(href=e.event.uri.materials, _class=
                  %e.event.uri.materials ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.floppy), alt=t['additional_materials'],
                title=t['additional_materials'])
          }
        }
      }

      div {
        h3(_class='section') { t['talks'] }

        div(id='talks') {
          # FIXME all the tracks should be in a DB and here shouldn't be
          #   anything in a fixed manner - only loops over existing data
          #   (CSS should be also generated from the data in the DB)

          div(_class='track_tips') {
            h4        { t['track_tips'] }
            paragraph { t['track_tips_desc'] }
            for (e in events_satisfying(participants, $talk, $tips)) {
              put_event(e)
            }
          }

          div(_class='track_world_around') {
            h4        { t['track_world_around'] }
            paragraph { t['track_world_around_desc'] }
            for (e in events_satisfying(participants, $talk, $world_around)) {
              put_event(e)
            }
          }

          div(_class='track_security') {
            h4        { t['track_security'] }
            paragraph { t['track_security_desc'] }
            for (e in events_satisfying(participants, $talk, $security)) {
              put_event(e)
            }
          }

          div(_class='track_challenges') {
            h4        { t['track_challenges'] }
            paragraph { t['track_challenges_desc'] }
            for (e in events_satisfying(participants, $talk, $challenges)) {
              put_event(e)
            }
          }

          div(_class='track_establishment') {
            h4        { t['track_establishment'] }
            paragraph { t['track_establishment_desc'] }
            for (e in events_satisfying(participants, $talk, $establishment)) {
              put_event(e)
            }
          }
        }
      }

      # dummy div to move stripe colors by one
      div(style='margin: 0; padding: 0; height: 0') { }
      div(style='margin: 0; padding: 0; height: 0') { }

      div {
        h3(_class='section') { t['workshops'] }

        div(id='workshops') {
          div(_class='track_tips') {
            h4        { t['track_tips'] }
            paragraph { t['track_tips_desc'] }
            for (e in events_satisfying(participants, $workshop, $tips)) {
              put_event(e)
            }
          }

          div(_class='track_world_around') {
            h4        { t['track_world_around'] }
            paragraph { t['track_world_around_desc'] }
            for (e in events_satisfying(participants, $workshop, $world_around)) {
              put_event(e)
            }
          }

          div(_class='track_security') {
            h4        { t['track_security'] }
            paragraph { t['track_security_desc'] }
            for (e in events_satisfying(participants, $workshop, $security)) {
              put_event(e)
            }
          }

          div(_class='track_challenges') {
            h4        { t['track_challenges'] }
            paragraph { t['track_challenges_desc'] }
            for (e in events_satisfying(participants, $workshop, $challenges)) {
              put_event(e)
            }
          }

          div(_class='track_establishment') {
            h4        { t['track_establishment'] }
            paragraph { t['track_establishment_desc'] }
            for (e in events_satisfying(participants, $workshop, $establishment)) {
              put_event(e)
            }
          }
        }
      }

      div(id='speakers') {
        h3(_class='section') { t['speakers'] }
        div {
          # FIXME
          #paragraph {
            for (pa in participants) {
              if (pa.events.find { X.kind == $internal } == none) {
                div(_class='speaker') {
                  # FIXME class moved from img to parent div
                  #img(_class='speaker', src=rel(pa.photo), alt=pa.name, title=pa.name)
                  img(src=rel(pa.photo), alt=pa.name, title=pa.name)
                  paragraph { pa.name }
                }
              }
            }
          #}
        }
        div(_class='clear_float') {}
      }

      text(_html_footer)
    }
  })
}

#routine workshops(
#    invar iar_name: string,
#    invar path: string,
#    invar trans: Locale,
#    invar dst: string,
#    invar pages: map<string, string>) => none {
#  html5 = io.open(path, 'w')
#  defer { html5.close() }
#
#  # just convenient shortcuts
#  invar cu = conf.uri
#  invar ci = conf.img
#  invar t = translations[trans]
#
#  rel = routine(invar target: string) { mkrel(dst, target) }
#
#  # FIXME it should be somehow allowed to run fragment{} from document{}
#  _html_head = html_head(trans, dst, pages)
#  _html_top_stripe = html_top_stripe($visitor, iar_name, trans, dst, pages)
#  _html_footer = html_footer(trans, dst)
#
#  html5.write(document {
#    text(_html_head)
#
#    body {
#      text(_html_top_stripe)
#
#      div {
#        h3(_class='section') { t['workshops'] }
#
#        if (my_time.time.now() >= conf.time_show_sched) {
#          div(id='workshops') {
#
#            div(_class='track_tips') {
##              h4        { t['track_tips'] }
##              paragraph { t['track_tips_desc'] }
#              for (e in events_satisfying(participants, $workshop, $tips)) {
#                div(_class='event') {
#                  paragraph(_class='event_title') { e.event.trans[trans].name }
#                  paragraph(_class='participant_name') { e.name }
#                  paragraph(_class='event_desc') {
#                    e.event.trans[trans].description
#                  }
#                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
#                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
#                }
#              }
#            }
#
#            div(_class='track_world_around') {
#              h4        { t['track_world_around'] }
#              paragraph { t['track_world_around_desc'] }
#              for (e in events_satisfying(participants, $workshop, $world_around)) {
#                div(_class='event') {
#                  paragraph(_class='event_title') { e.event.trans[trans].name }
#                  paragraph(_class='participant_name') { e.name }
#                  paragraph(_class='event_desc') {
#                    e.event.trans[trans].description
#                  }
#                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
#                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
#                }
#              }
#            }
#
#            div(_class='track_security') {
#              h4        { t['track_security'] }
#              paragraph { t['track_security_desc'] }
#              for (e in events_satisfying(participants, $workshop, $security)) {
#                div(_class='event') {
#                  paragraph(_class='event_title') { e.event.trans[trans].name }
#                  paragraph(_class='participant_name') { e.name }
#                  paragraph(_class='event_desc') {
#                    e.event.trans[trans].description
#                  }
#                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
#                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
#                }
#              }
#            }
#
#            div(_class='track_challenges') {
#              h4        { t['track_challenges'] }
#              paragraph { t['track_challenges_desc'] }
#              for (e in events_satisfying(participants, $workshop, $challenges)) {
#                div(_class='event') {
#                  paragraph(_class='event_title') { e.event.trans[trans].name }
#                  paragraph(_class='participant_name') { e.name }
#                  paragraph(_class='event_desc') {
#                    e.event.trans[trans].description
#                  }
#                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
#                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
#                }
#              }
#            }
#
#            div(_class='track_establishment') {
#              h4        { t['track_establishment'] }
#              paragraph { t['track_establishment_desc'] }
#              for (e in events_satisfying(participants, $workshop, $establishment)) {
#                div(_class='event') {
#                  paragraph(_class='event_title') { e.event.trans[trans].name }
#                  paragraph(_class='participant_name') { e.name }
#                  paragraph(_class='event_desc') {
#                    e.event.trans[trans].description
#                  }
#                  paragraph(_class='participation_reqs') { t['participation_reqs'] }
#                  paragraph(_class='event_reqs') { e.event.trans[trans].requirements }
#                }
#              }
#            }
#
#          }
#        }
#        else {
#          #paragraph { t['workshops_empty'] }
#        }
#      }
#
#      text(_html_footer)
#    }
#  })
#}
