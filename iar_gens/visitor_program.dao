# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content
load string.format

namespace iar { visitor_program }

routine visitor_program(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>,
    invar groups: IarGroup) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }

  # FIXME it should be somehow allowed to run fragment{} from document{}
  _html_top_stripe = html_top_stripe(groups, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    html_head(trans, dst, pages)

    body {
      text(_html_top_stripe)

      # dummy div to move stripe colors by one
      #div(_class='dummy_section') { }

#      if (my_time.time.now() >= conf.time_show_sched) {
#        div(id='schedule') {
#          h3(_class='section') { t['schedule'] }
#
#          # construct reversed event mappings
#          # FIXME do it using SQL (just use the built-in sqlite module)
#
#          # FIXME remove casting
#          places = (map<string, int>){->}
#          days = (map<my_time.time::DateTime, map<
#                  my_time.time::DateTime, map<string, @T>
#                  >>){->}
#          participants.iterate { [p]
#            p.events.iterate { [ev]
#              if (ev.kind != $party) {
#                # rank ~ number of occurences
#                if (ev.trans[trans].place in places)
#                  ++places[ev.trans[trans].place]
#                else
#                  places[ev.trans[trans].place] = 1
#              }
#
#              day = my_time.time.make(ev.from.year, ev.from.month, ev.from.day)
#              # each day separately
#              if (day not in days)
#                days[day] = {->}
#              # each event
#              if (ev.from not in days[day])
#                days[day][ev.from] = {->}
#              # each place
#              if (ev.trans[trans].place not in days[day][ev.from])
#                days[day][ev.from][ev.trans[trans].place] = (author=p, event=ev)
#              else
#                io.stderr.writeln('WARN >1 events at a venue',
#                    ev.trans[trans].place, 'at time', ev.from)
#            }
#          }
#
#          # adjust reverse mappings
#
#          orig_ind = 0
#          places2 = places.collect {
#            (orig_ind = 0, id = X, rank = Y)
#          } .sort {
#            X.id > Y.id
#          } .apply {
#            # FIXME imitate stable sort by remembering the index
#            X.orig_ind = ++orig_ind
#            return X
#          } .sort {
#            if (X.rank == Y.rank)
#              return X.orig_ind > Y.orig_ind
#            else
#              return X.rank > Y.rank
#          }
#
#          day_sets = routine(m: map<my_time.time::DateTime, map<string, @T>>)
#              => list<tuple<kind: enum, track: enum, cell_lines: list<list<@T>>>> {
#
#            res = (list<tuple<kind: enum, track: enum, cell_lines: list<list<@T>>>>){}
#            last_event: none|@T = none
#
#            m.keys().sort().iterate { [time_point]
#              m[time_point].iterate { [place, cell]
#                if (last_event != none && (
#                    (last_event.kind == $party && cell.event.kind == $party) ||
#                    (
#                    # all non-party events are in the same cluster
#                    last_event.kind != $party && cell.event.kind != $party)
#                )) {
#                  if (last_event.from == cell.event.from)
#                    res[-1].cell_lines[-1].append(cell)
#                  else
#                    res[-1].cell_lines.append({cell})
#                }
#                else {
#                  res.append( (kind=cell.event.kind, track=cell.event.track, cell_lines={{cell}}) )
#                }
#
#                last_event = cell.event
#              }
#            }
#
#            return res
#          }
#
#          # create tables and paragraphs from the reversed mappings
#
#          days.keys().sort().iterate { [day]
#            paragraph {
#              # FIXME %A causes sigsegv
#              #localized_time_format(t['_locale'], day, '%A %-d. %-m. %Y')
#              day.format('%-d. %-m. %Y')
#            }
#
#            day_sets(days[day]).iterate { [set]
#              if (set.kind == $party) {
#                set.cell_lines.iterate { [cell_line]
#                  cell_line.iterate { [cell]
#                    div {
#                      paragraph { cell.event.from.format('%H:%M') }
#                      paragraph { cell.event.trans[trans].name }
#                      paragraph { cell.event.trans[trans].description }
#                      paragraph { cell.event.trans[trans].requirements }
#                      paragraph { cell.event.trans[trans].place }
#                    }
#                  }
#                }
#              }
#              else {
#                table {
#                  tr {
#                    th {}
#                    places2.iterate { [place]
#                      th {
#                        img(src=rel(ci.door), alt=place.id, title=place.id)
#                        span { place.id }
#                      }
#                    }
#                  }
#
#                  set.cell_lines.iterate { [cell_line]
#                    tr {
#                      # there is at least 1 cell
#                      td {
#                        invar time = cell_line[0].event.from.format('%H:%M')
#                        img(src=rel(ci.clock), alt=time, title=time)
#                        span { time }
#                      }
#
#                      cell_line.iterate { [cell]
#                        # tight-loop to preserve order
#                        places2.iterate { [place]
#                          if (place.id == cell.event.trans[trans].place) {
#                            td {
#                              invar track = str.format('track_$0', cell.event.track)
#                              span(_class=track.change('_.', '_')) {}
#                              span { cell.event.trans[trans].name }
#                              span { cell.author.name }
#                            }
#                          }
#                        }
#                      }
#                    }
#                  }
#                }
#              }
#            }
#          }
#        }
#      }

      #div(_class='dummy_section') { }

      put_event = routine(invar e: tuple<name:string, event:Event>) {
        return div(_class='event') {
          paragraph(_class='event_title') { e.event.trans[trans].name }
          paragraph(_class='participant_name') { e.name }
          paragraph(_class='event_desc') {
            e.event.trans[trans].description
          }

          if (e.event.kind == $workshop) {
            paragraph(_class='event_reqs') { t['participation_reqs'] }
            paragraph(_class='event_desc') { e.event.trans[trans].requirements }
          }

          # icons
          anchor(href=e.event.uri.video_rec, _class=
                 # FIXME none would mean not outputting this attribute
                 # FIXME enhance the ternary operator with none (because we already have automatical none-removal while evaluating)
                 %e.event.uri.video_rec ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.video), alt=t['video_rec'],
                title=t['video_rec'])
          }
          anchor(href=e.event.uri.presentation, _class=
                  %e.event.uri.presentation ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.doc_pdf), alt=t['presentation'],
                title=t['presentation'])
          }
          anchor(href=e.event.uri.materials, _class=
                  %e.event.uri.materials ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.floppy), alt=t['additional_materials'],
                title=t['additional_materials'])
          }
        }
      }

      div {
        h3(_class='section') { t['talks'] }

        div(id='talks') {
          # FIXME all the tracks should be in a DB and here shouldn't be
          #   anything in a fixed manner - only loops over existing data
          #   (CSS should be also generated from the data in the DB)

          div {
            div(_class='narrow_paragraph track0') {
              div(_class='circle') { }  # CSS circle
              div(_class='track') {
                h4        { t['track0'] }
                paragraph { t['track0_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track0)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track1') {
              div(_class='circle') { }  # CSS circle
              div(_class='track') {
                h4        { t['track1'] }
                paragraph { t['track1_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track1)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track2') {
              div(_class='circle') { }  # CSS circle
              div(_class='track') {
                h4        { t['track2'] }
                paragraph { t['track2_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track2)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track3') {
              div(_class='circle') { }  # CSS circle
              div(_class='track') {
                h4        { t['track3'] }
                paragraph { t['track3_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track3)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track4') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track4'] }
                paragraph { t['track4_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track4)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track5') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track5'] }
                paragraph { t['track5_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track5)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track6') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track6'] }
                paragraph { t['track6_desc'] }
              }
              for (e in events_satisfying(participants, $talk, $track6)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }
        }
      }

      # dummy div to move stripe colors by one
      div(_class='dummy_section') { }
      div(_class='dummy_section') { }

      div {
        h3(_class='section') { t['workshops'] }

        div(id='workshops') {
          div {
            div(_class='narrow_paragraph track0') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track0'] }
                paragraph { t['track0_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track0)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track1') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track1'] }
                paragraph { t['track1_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track1)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track2') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track2'] }
                paragraph { t['track2_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track2)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track3') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track3'] }
                paragraph { t['track3_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track3)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track4') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track4'] }
                paragraph { t['track4_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track4)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track5') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track5'] }
                paragraph { t['track5_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track5)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }

          div {
            div(_class='narrow_paragraph track6') {
              div(_class='circle') { }
              div(_class='track') {
                h4        { t['track6'] }
                paragraph { t['track6_desc'] }
              }
              for (e in events_satisfying(participants, $workshop, $track6)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }
        }
      }

#      div(id='speakers') {
#        h3(_class='section') { t['speakers'] }
#        div {
#          # FIXME
#          #paragraph {
#            for (pa in participants) {
#              if (pa.events.find { X.kind == $internal } == none) {
#                div(_class='speaker') {
#                  # FIXME class moved from img to parent div
#                  #img(_class='speaker', src=rel(pa.photo), alt=pa.name, title=pa.name)
#                  img(src=rel(pa.photo), alt=pa.name, title=pa.name)
#                  paragraph { pa.name }
#                }
#              }
#            }
#          #}
#        }
#        div(_class='clear_float') {}
#      }

      text(_html_footer)
    }
  })
}
