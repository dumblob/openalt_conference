# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content
load string.format

namespace iar { visitor_program }

routine visitor_program(
    invar iar_name: string,
    invar path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>,
    invar groups: IarGroup) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { mkrel(dst, target) }

  # FIXME it should be somehow allowed to run fragment{} from document{}
  _html_top_stripe = html_top_stripe(groups, iar_name, trans, dst, pages)
  _html_footer = html_footer(trans, dst)

  html5.write(document {
    html_head(trans, dst, pages)

    body {
      text(_html_top_stripe)

      # anchor links unique for this page
      uniqueascii_context: map<string, none> = {=>}
      invar event_id_prefix = 'event_title_'
      invar track_id_prefix_workshop = 'workshop_'
      invar track_id_prefix_talk = 'talk_'

      if (my_time.time.now() >= conf.time_show_sched) {
        div(id='schedule') {
          h3(_class='section') { t['schedule'] }

          # construct reversed event mappings
          # FIXME do it using SQL (just use the built-in sqlite module)

          places: map<string, int> = {->}
          days: map<my_time.time::DateTime, map<
            my_time.time::DateTime, map<string, @T>>> = {->}
          participants.iterate { [p]
            for (ev in p.events) {
              if (ev.kind == $additional) skip

              if (ev.kind != $party) {
                # rank ~ number of occurences
                if (ev.trans[trans].place in places)
                  ++places[ev.trans[trans].place]
                else
                  places[ev.trans[trans].place] = 1
              }

              day = my_time.time.make(ev.from.year, ev.from.month, ev.from.day)
              # each day separately
              if (day not in days)
                days[day] = {->}

              # each event
              if (ev.from not in days[day])
                days[day][ev.from] = {->}

              # each place
              if (ev.trans[trans].place not in days[day][ev.from])
                # ... = (list<subcell>) ...
                days[day][ev.from][ev.trans[trans].place] = {(author=p, event=ev)}
              else
                days[day][ev.from][ev.trans[trans].place].append(
                  (author=p, event=ev)
                )
                # FIXME
                #io.stderr.writeln('WARN 1+ events in',
                #    ev.trans[trans].place, 'at', ev.from)
            }
          }

          # adjust reverse mappings

          invar preferred_order = {
            'D105'  => 1,
            'D0206' => 2,
            'D0207' => 3,
            'E112'  => 4,
            'E104'  => 5,
            'A112'  => 6,
            'A113'  => 7,
            #'O104'  => 8,
          }
          remove = places.collect {
            if (X in preferred_order)
              return none
            else
              return X
          }
          remove.iterate { places.erase(X) }
          places2 = places
              .collect { (id = X,) }
              # FIXME sigsegv https://github.com/daokoder/dao-modules/issues/81
              #.collect { X in preferred_order ? (@T)(id = X,) : (@T)none }
              .sort {
            preferred_order[X.id] < preferred_order[Y.id]
          }

#          orig_ind = 0
#          places2 = places.collect {
#            (orig_ind = 0, id = X, rank = Y)
#          } .sort {
#            X.id > Y.id
#          } .apply {
#            # FIXME imitate stable sort by remembering the index
#            X.orig_ind = ++orig_ind
#            return X
#          } .sort {
#            if (X.rank == Y.rank)
#              return X.orig_ind > Y.orig_ind
#            else
#              return X.rank > Y.rank
#          }

          day_sets = routine(m: map<my_time.time::DateTime, map<string, @T>>)
              # FIXME
              #=> list<tuple<kind: enum, track: enum, cell_lines: list<
              #list<@T>>>> {
              => list<tuple<kind: enum, cell_lines: list<list<@T>>>> {

            # FIXME
            #res: list<tuple<kind: enum, track: enum, cell_lines: list<
            #  list<@T>>>> = {}
            res: list<tuple<kind: enum, cell_lines: list<list<@T>>>> = {}
            last_event: none|@T = none

            m.keys().sort().iterate { [time_point_in_a_day]
              m[time_point_in_a_day].iterate { [place, cell]  # [key, value]
                if (last_event != none && (
                    (last_event.kind == $party && cell[0].event.kind == $party) ||
                    (
                    # all non-party events are in the same cluster
                    last_event.kind != $party && cell[0].event.kind != $party)
                )) {
                  if (last_event.from == cell[0].event.from)
                    res[-1].cell_lines[-1].append(cell)
                  else
                    res[-1].cell_lines.append({cell})
                }
                else {
                  # FIXME
                  #res.append( (kind=cell.event.kind, track=cell.event.track,
                  #             cell_lines={{cell}}) )
                  # kind is just to distinguish if $party or non-$party
                  res.append( (kind=cell[0].event.kind, cell_lines={{cell}}) )
                }

                last_event = cell[0].event
              }
            }

            return res
          }

          # create tables and paragraphs from the reversed mappings

          days.keys().sort().iterate { [day]
            paragraph {
              # FIXME %A causes sigsegv
              #localized_time_format(t['_locale'], day, '%A %-d. %-m. %Y')
              day.format('%-d. %-m. %Y')
            }

            day_sets(days[day]).iterate { [set]
              if (set.kind == $party) {
                set.cell_lines.iterate { [cell_line]
                  cell_line.iterate { [cell]
                    div {
                      paragraph { cell[0].event.from.format('%H:%M') }
                      paragraph { cell[0].event.trans[trans].name }
                      paragraph { cell[0].event.trans[trans].description }
                      paragraph { cell[0].event.trans[trans].requirements }
                      paragraph { cell[0].event.trans[trans].place }
                    }
                  }
                }
              }
              else {
                table {
                  tr {
                    th {}
                    places2.iterate { [place]
                      th {
                        img(src=rel(ci.door), alt=place.id, title=place.id)
                        span { place.id }
                      }
                    }
                  }

                  rowspan = {=>}

                  set.cell_lines.iterate { [cell_line]
                    tr {
                      td {
                        invar time = cell_line[0][0].event.from.format('%H:%M')
                        img(src=rel(ci.clock), alt=time, title=time)
                        span { time }
                      }

                      places2.iterate { [place]
                        cell_found = false

                        # tight-loop to preserve order
                        for (cell in cell_line) {
                          if (place.id != cell[0].event.trans[trans].place)
                            skip

                          cell_found = true
                          rowspan[place.id] =
                            (cell[0].event.to - cell[0].event.from).hours

                          td(_class=cell[0].event.kind == $workshop ?
                              'cell_workshop' : 'cell_talk',
                              rowspan=rowspan[place.id] < 1 ? 1 :
                              rowspan[place.id]) {

                            cell2 = cell.sort {
                              X.event.priority > Y.event.priority
                            }
# FIXME
# [[Error::Value]] --- Invalid value:
# invalid returned value
# In code snippet:
#     583 :  GOTO        :     0 ,   544 ,    70 ;   197;   }
# >>  584 :  RETURN      :   422 ,     1 ,    70 ;   191;   . iterate { [subcell] sp...
#     585 :  GOTO        :     0 ,   538 ,    70 ;   198;   }
# Raised by:  visitor_program(), at instruction 584 in line 191 in file "/home/honza/src/misc/openalt_
#             conference/iar_gens/visitor_program.dao";
# WARNING: try activating events (2,2,0,2)!
# ERROR: All tasklets are suspended - deadlock!
# ERROR: All tasklets are suspended - deadlock!
                            #cell2.iterate { [subcell]

                            for (subcell in cell2) {
                              invar track_str =
                                ((string)subcell.event.track)[1:]

                              anchor(href= '#' +
                                     (cell[0].event.kind == $workshop ?
                                     track_id_prefix_workshop :
                                     track_id_prefix_talk) +
                                     uniqueascii(track_str, {=>})) {
                                span(_class=track_str) {}
                              }
                              anchor(href='#' + event_id_prefix +
                                  uniqueascii(
                                    subcell.event.trans[trans].name, {=>})) {
                                subcell.event.trans[trans].name
                              }
                              span { subcell.author.name }
                            }
                          }
                        }

                        if (place.id in rowspan && rowspan[place.id] >= 1)
                          --rowspan[place.id]
                        else
                          if (! cell_found) td {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      put_event = routine(invar e: tuple<name:string, event:Event>) {
        return div(_class='event') {
          paragraph(_class='event_title') {
            # additional span for special CSS for anchor jumps
            span(id=event_id_prefix +
                uniqueascii(e.event.trans[trans].name, {=>})) {
              e.event.trans[trans].name
            }
          }

          if (%e.event.kind == $additional)
            paragraph(_class='participant_name') { e.name }

          paragraph(_class='event_desc') {
            e.event.trans[trans].description
          }

          if (e.event.kind == $workshop && %e.event.trans[trans].requirements) {
            paragraph(_class='event_reqs') { t['participation_reqs'] }
            paragraph(_class='event_desc') { e.event.trans[trans].requirements }
          }

          # icons
          anchor(href=e.event.uri.video_rec, _class=
                 # FIXME none would mean not outputting this attribute
                 # FIXME enhance the ternary operator with none (because we already have automatical none-removal while evaluating)
                 %e.event.uri.video_rec ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.video), alt=t['video_rec'],
                title=t['video_rec'])
          }
          anchor(href=e.event.uri.presentation, _class=
                  %e.event.uri.presentation ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.doc_pdf), alt=t['presentation'],
                title=t['presentation'])
          }
          anchor(href=e.event.uri.materials, _class=
                  %e.event.uri.materials ? (@T)none : (@T)'not_clickable') {
            img(src=rel(ci.floppy), alt=t['additional_materials'],
                title=t['additional_materials'])
          }
        }
      }

      put_track = routine(invar kind: Kind, track: Track) {
        if (! %events_satisfying(participants, kind, track))
          return

        div {
          invar track_str = ((string)track)[1:]

          div(_class='narrow_paragraph ' + track_str, id=
              (kind == $workshop ? track_id_prefix_workshop :
              track_id_prefix_talk) + uniqueascii(track_str, {=>})) {
            div(_class='circle') { }  # CSS circle
            div(_class='track') {
              h4        { t[track_str] }
              paragraph { t[track_str + '_desc'] }
            }
            for (e in events_satisfying(participants, kind, track)) {
              put_event(e)
            }
          }
          div(_class='clear_float') {}
        }
      }

      #div {
      div(_class='no_bottom_padding') {
        h3(_class='section') { 'Doprovodné akce' }

        div(_class='talks') {
          div {
            div(_class='narrow_paragraph') {
              for (e in events_satisfying(participants, $additional, $track6)) {
                put_event(e)
              }
            }
            div(_class='clear_float') {}
          }
        }
      }

      # dummy div to move stripe colors by one
      div(_class='dummy_section') { }

      div(_class='no_bottom_padding') {
        h3(_class='section') { t['talks'] }

        div(_class='talks') {
          # FIXME all the tracks should be in a DB and here shouldn't be
          #   anything in a fixed manner - only loops over existing data
          #   (CSS should be also generated from the data in the DB)

          put_track($talk, $track0)
          put_track($talk, $track1)
          put_track($talk, $track2)
          put_track($talk, $track3)
          put_track($talk, $track4)
          put_track($talk, $track5)
          put_track($talk, $track6)
        }
      }

      # dummy div to move stripe colors by one
      div(_class='dummy_section') { }
      div(_class='dummy_section') { }

      #div {
      div(_class='no_bottom_padding') {
        h3(_class='section') { t['workshops'] }

        div(id='workshops') {
          put_track($workshop, $track0)
          put_track($workshop, $track1)
          put_track($workshop, $track2)
          put_track($workshop, $track3)
          put_track($workshop, $track4)
          put_track($workshop, $track5)
          put_track($workshop, $track6)
        }
      }

#      div(id='speakers') {
#        h3(_class='section') { t['speakers'] }
#        div {
#          # FIXME
#          #paragraph {
#            for (pa in participants) {
#              if (pa.events.find { X.kind == $internal } == none) {
#                div(_class='speaker') {
#                  # FIXME class moved from img to parent div
#                  #img(_class='speaker', src=rel(pa.photo), alt=pa.name, title=pa.name)
#                  img(src=rel(pa.photo), alt=pa.name, title=pa.name)
#                  paragraph { pa.name }
#                }
#              }
#            }
#          #}
#        }
#        div(_class='clear_float') {}
#      }

      div(_class='dummy_section') { }

      text(_html_footer)
    }
  })
}
