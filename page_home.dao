#FIXME partners - block
#FIXME add stripes over participants' photos
#FIXME add year under the the header under the black stripe
#      before the stripe? and then using CSS to the right place
#FIXME rewrite the table generation in schedule using paragraphs in cells

# conflicting html tag name with namespace name
load time as my_time
load web.html import html
load config import configuration
load translations import translation
load lib import lib
load html_common import html_content

namespace html_content { page_home }

routine page_home(
    invar page_name: string,
    path: string,
    invar trans: Locale,
    invar dst: string,
    invar pages: map<string, string>) => none {
  html5 = io.open(path, 'w')
  defer { html5.close() }

  # just convenient shortcuts
  invar cu = conf.uri
  invar ci = conf.img
  invar t = translations[trans]

  rel = routine(invar target: string) { return mkrel(dst, target) }
  rel2 = routine(invar ref: LocalRefs) => string {
    tup = html_local_refs[ref]
    return mkrel(dst, dst + '/' + pages[tup[0]]) +
      ((%tup[1]) ? '#' + tup[1] : '')
  }

  # FIXME it should be somehow allowed
  _html_head = html_head(trans, dst, pages)
  _html_top_stripe = html_top_stripe(page_name, trans, dst, pages)

  html5.write(document {
    text(_html_head)
    body {
      text(_html_top_stripe)

      div(id='header') {
        img(src=rel(ci.logo_oa_conf), alt=t['logo_oa_conf'], title=t['logo_oa_conf'])
        paragraph(_class='narrow_paragraph') { t['motivation'] }
        paragraph(id='time_range') {
          strong {
            localized_time_format(
              t['_locale'], conf.time_from, '%-d.') + '-' +
            localized_time_format(
              t['_locale'], conf.time_to, '%-d. %B %Y')
          }
        }
      }
      div(id='main_buttons') {
        anchor(href=rel2($talks)) { t['talks'] }
        anchor(href=rel2($workshops)) { t['workshops'] }
        anchor(href=rel2($schedule)) { t['schedule'] }
      }

      # FIXME why need to use value?
      if (my_time.time.now().add(days=-1).value > conf.time_to.value) {
        div(id='feedback') {
          h3(_class='section') { t['feedback'] }

          for (piece in feedback) {
            paragraph(_class='feedback_msg narrow_paragraph') { piece.msg }
            if (piece.author != none)
              paragraph(_class='feedback_author narrow_paragraph') { piece.author }
          }
        }
      }

      div(id='speakers') {
        h3(_class='section') { t['speakers'] }
        div {
          paragraph {
            for (pa in participants) {
              if (pa.events.find { X.kind == $internal } == none) {
                img(_class='speaker', src=rel(pa.photo), alt=pa.name, title=pa.name)
              }
            }
          }
        }
        div(_class='clear_float') {}
      }

      div(id='schedule') {
        h3(_class='section') { t['schedule'] }

        rooms = {}
        participants.iterate { [p]
          p.events.iterate {
            if (X.trans[trans].place not in rooms)
              rooms.append(X.trans[trans].place)
          }
        }
        rooms.sort($descend)

        table {
          tr { rooms.iterate { [r] th { r } } }

#          for (et in existing_times) {
#            for (room in sorted_rooms) {
#              td {
#                e = event(et, room)
#                paragraph { e.name }
#                paragraph { e.author }
#              }
#            }
#          }
        }
#{
        # FIXME reuse the sorted items (use guard?)
        events = {}
        participants.iterate { [p]
          p.events.iterate { events.append((X, p)) }
        }
        # according to time and place
        events = events.sort {
          # FIXME why need to use value?
          if (X[0].from.value == Y[0].from.value)
            return X[0].trans[trans].place < Y[0].trans[trans].place
          else
            return X[0].from < Y[0].from
        }

        for (i = 0; i < %events;) {
          last_from = events[i][0].from

          paragraph {
            localized_time_format(t['_locale'], last_from, '%A %-d. %-m. %Y')
          }

          table {
            for ((border_top, first_iter) = (true, true);
                 i < %events; i += 1) {
              (e, participant) = events[i]

              if (e.from.year  == last_from.year &&
                  e.from.month == last_from.month &&
                  e.from.day   == last_from.day) {
                # FIXME why need to use value?
                if (e.from.value == last_from.value && ! first_iter)
                  border_top = false
                else
                  border_top = true
              }
              else {
                break
              }

              tr {
                # FIXME class doesn't work - why?
                td(_class=(border_top) ? 'with_border_top' : '') {
                  # FIXME don't mention this image in HTML,
                  #   but use it only in CSS as decoration?
                  img(src=rel(ci.clock), title=ci.clock)
                  text(e.from.format('%-H:%M'))
                  if (%e.trans[trans].place) {
                    img(src=rel(ci.door), title=ci.door)
                    text(e.trans[trans].place)
                  }
                }
                td(_class=(border_top) ? 'with_border_top' : '') {
                  strong { e.trans[trans].name }
                  if (e.kind != $internal) {
                    switch (e.kind) {
                      case $workshop: text(' / ' + t['workshop'])
                      case $talk:     text(' / ' + t['talk'])
                    }
                    text(' / ' + participant.name + ' (' +
                      (string)(my_time.time.diff(e.from, e.to).seconds/60) +
                      ' min)')
                  }
                }
              }

              last_from = e.from
              first_iter = false
            }
          }
        }
#}
      }

      div(id='location') {
        h3(_class='section') { t['location'] }
        paragraph { t['address'] }
        img(src=rel(ci.location),
            alt=t['location'] + ': ' + conf.coord_gps,
            title=t['location'] + ': ' + conf.coord_gps)
      }

      # FIXME why need to use value?
      if (my_time.time.now().add(days=-1).value > conf.time_to.value) {
        div(id='thanks') {
          h3(_class='section') { t['thanks'] }
          paragraph(_class='narrow_paragraph') { t['thank_you'] }
        }
      }

      div(id='partners') {
        h3(_class='section') { t['partners'] }
        # FIXME distinguish $general and $main
        paragraph {
          for (invar p in partners) {
            anchor(href=p.uri) {
              img(_class='partner', src=rel(p.img), alt=p.name, title=p.name)
            }
          }
        }
      }

      div(id='footer') {
        paragraph { t['footer'] }
      }
    }
  })
}
