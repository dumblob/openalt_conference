load sync
load time import time
load os
load os.fs
load string.scanner  # FIXME imports str

# FIXME Dao namespaces have to be declared in advance
namespace iar {}

namespace lib {
  DateTimeX, Locale, Kind, Track, Event, Participant,
  isrel, check_path, events_satisfying, localized_time_format, mkrel,
  parse_csv, gen_participants,
}

interface DateTimeX {
  routine add(invar self: time.DateTime,
    ...: tuple<enum<years, months, days>, int> as vargs) => time.DateTime
}
interface DateTimeX for DateTime {
  routine add(invar self: time.DateTime,
      ...: tuple<enum<years, months, days>, int> as vargs) => time.DateTime {
    self.add(vargs, ...)
    return self
  }
}

type Locale = enum<cs, en, sk, de, fi>
type Kind = enum<talk, workshop, internal, party>
type Track = enum<track0, track1, track2, track3, track4, track5, track6>
# free grouping (might be used for anything - e.g. menus auto-generation)
type IarGroup = enum<initial; visitor; speaker; partner>
type PartnerLevel = enum<general, gold, silver, bronze, supporter>
type Partner = tuple<level:PartnerLevel, name:string, img:string, uri:string, desc:string>


type Event = tuple<
  kind: Kind,
  track: Track,
  uri:tuple<
    video_rec: string,
    presentation: string,
    materials: string,
  >,
  from: time.DateTime,
  to: time.DateTime,
  trans:map<Locale, tuple<
    name: string,
    requirements: string,
    description: string,
    place: string,
  >>,
>

type Participant = tuple<
  # subject name (e.g. 'Name Surname', 'My Cool Company')
  name: string,
  # none ~ person; list<string> ~ references to Participants
  members: none|list<string>,
  photo: string,
  trans: map<Locale, tuple<
    # primary role of this subject (designer(s), analyst(s), manager(s),
    #   programmer, ...)
    role: string,
    note: string,
  >>,
  events: list<Event>,  # events, this person is in charge for
>

routine isrel(invar uri: string) {
  #uri[0] != '/'[0] && uri.match('^[^:/]+') == none
  uri[0] != '/'[0] && uri.match('^[a-zA-Z0-9]+:/') == none
}

# FIXME use for_local_existence in auto-generated content (participants...)
routine check_path(invar uri: none|string, for_local_existence = false) {
  if (uri == none or %uri <= 0) return

  if (for_local_existence) {
    #if (! fs.exists(uri))
    if (! fs.exists((string)uri))
      std.error('"' + uri + '" doesn\'t exist')
  }
  else {
    #if (uri[0] != '/'[0] && uri.match('^[^:/]+') == none)
    if ( isrel(uri) )
      std.error('"' + uri + '" is not a full path nor non-relative URI')
  }
}

routine events_satisfying(
    participants: list<Participant>,
    invar kind: Kind,
    invar track: Track) => list<tuple<name:string, event:Event>> {
  res = (list<tuple<name:string, event:Event>>){}
  participants.iterate { [p]
    p.events.iterate {
      if (X.kind == kind && X.track == track) res.append((p.name, X))
    }
  }
  return res
}

# FIXME this should be achieved using the map capability of the new time module
var mutex_locale = mt.Mutex()
routine localized_time_format(invar locale: string,
    invar t: time.DateTime, invar pattern: string) => string {
  mutex_locale.lock()
  defer { mutex_locale.unlock() }
  old = os.setlocale($time)
  defer { os.setlocale($time, old) }
  os.setlocale($time, locale)
  return t.format(pattern)
}

# FIXME use the os.path module
routine mkrel(from_path: string, invar target_uri: string) => string {
  std.assert(%from_path and %target_uri)
  # FIXME assert that paths are normalized (can't use fs.realpath(), because
  #   it requires file existence)
  if (from_path [0] != '/'[0]) std.error('"from" is not a full path')
  if (from_path[-1] != '/'[0]) from_path += '/'
  if (target_uri[0] != '/'[0]) {
    if (target_uri.match('^[^:/]+') == none)
      std.error('"target" is not a full path nor URI')
    else
      return target_uri
  }

  shared = 1  # /
  while (1) {
    x = target_uri[shared:].fetch('[^/]+')
    y = from_path[shared:].fetch('[^/]+')
    if (%x && x == y)
      shared += %x +1  # +1 for /
    else
      break
  }
  return from_path[shared:].change('[^/]+', '..') + target_uri[shared:]
}

# FIXME rewrite as generator with internal cache with the size of
#   an HDD block
# assume embedded control characters are doubled instead of escaped
routine parse_csv(
    invar data: string,
    invar quote = "'",
    invar field_sep = '\t',
    invar record_sep = '\n') => list<list<string>> {
  std.assert(%quote == 1 && %field_sep == 1 && %record_sep == 1)

  s = str.Scanner(data)
  res: list<list<string>> = {{}}

  while (s.rest) {
    i = 0  # number of leading quotes in a field (including embedded ones)
    # FIXME \n \t \' can't be matched without enclosing them into []
    for (; s.scan('[' + quote + ']'); i += 1) {
      if (s.scan('[^' + quote + ']+')) {
        if (i)
          res[-1][-1] += quote + s.matched()
        else
          res[-1].append(s.matched())
      }
      else {
        # CSV empty item is an exception to the double-quote rule
        res[-1].append('')
      }

      s.pos += 1  # the closing quote
    }

    if (i == 0) {
      if (s.scan('[^' + field_sep + record_sep + ']+')) {
        res[-1].append(s.matched())
        i = 1
      }
    }

    if (s.scan('[' + field_sep + ']')) {
      if (i == 0) res[-1].append('')
    }
    else if (s.scan('[' + record_sep + ']')) {
      res.append({})
    }
    else {
      io.stderr.writeln('ERR Invalid CSV at `' + s.peek(30) + '\'')
    }
  }

  # emptly line before EOF is a useless empty list
  if (! %res[-1]) res.pop()

  return res
}

# FIXME add lunch, dinner, etc. to the input CSV
routine gen_participants(invar csv: list<list<string>>) => string {
  res = 'load config import configuration . { conf }
load lib import lib
load time import time
namespace participants_ns { participants }

_participants: list<Participant> = {
'
  csv[1:].iterate { [_line]
    # escape everything for sure
    line = _line.collect { X.replace('\\', '\\\\').replace("'", "\\'") }
    #{
      0  serial number
      1  name + surname
      2  accommodation (patek + sobota)
      3  t-shirt size
      4  preffered day of the talk/workshop
      5  name + surname of personal supporters for the session
      6  accommodation
      7  t-shirt size
      8  type (přednáška|workshop) <unknown>
      9  talk/workshop title
      10 abstract
      11 length of the talk/workshop
      12 name ???
      13 file size
      14 requirements for attendance
      15 note
      16 accepted for voting (usually contains X)
    #}
    if (line[1].convert($lower).match('test') != none)
      io.stderr.writeln('WARN omitting `' + line[1] + "'")
    else
      res += "
  ('" + line[1].trim() + "',
  members = " + (%line[5] ? "{ '" + line[5].trim().replace('\n', '\n#') + "' },\n" : "none,") + "
  conf.resdir / 'img/participants/" + line[1].trim().convert($lower).change('%s+', '_') + ".jpg',
  trans = {
    $en -> ('',
            'SPEAKER DESCRIPTION IS MISSING',),
    $cs -> ('',
            'SPEAKER DESCRIPTION IS MISSING',),
  },
  events = {
   # " + line[15].replace('\n', '\n#') + "
   # column12: " + line[12].replace('\n', '\n#') + "
   (" + ( (line[8].trim().match('^workshop$') != none) ? "$workshop" :
    (line[8].trim().match('^přednáška$') != none) ? "$talk" :
    "$unknown" ) + ",
    # " + line[11].replace('\n', '\n#') + "
    time.make(conf.time_to.year, conf.time_to.month, conf.time_to.day" +
      ((line[4].trim().match('^sobota$') != none) ? ' -1' : '') + ", 8, 00),
    time.make(conf.time_to.year, conf.time_to.month, conf.time_to.day" +
      ((line[4].trim().match('^sobota$') != none) ? ' -1' : '') + ", 8, 45),
    trans = {
      $en -> ('" + line[9] + "',
             '" + line[14] + "',
             '" + line[10] + "',
             'UNKNOWN_PLACE',),
      $cs -> ('" + line[9] + "',
             '" + line[14] + "',
             '" + line[10] + "',
             'UNKNOWN_PLACE',),
      $sk -> ('" + line[9] + "',
             '" + line[14] + "',
             '" + line[10] + "',
             'UNKNOWN_PLACE',),
      $de -> ('" + line[9] + "',
             '" + line[14] + "',
             '" + line[10] + "',
             'UNKNOWN_PLACE',),
    }
   )
  }),
"
  }

  return res + "}

var participants: list<Participant> = {}

# remove duplicates
for (_p in _participants) {
  # FIXME (_, p) = ...
  p = participants.find { X.name == _p.name }
  if (p == none)
    participants.append(_p)
  else
    _p.events.iterate { p.value.events.append(X) }
}

# FIXME update according to the current participants.dao
#               load web.json
#               io.writeln(json.serialize(participants) {
#                 # (list<json.Data>)
#                 switch (X) type {
#                   #case tuple<a,b>: return {'a' => X.a, 'b' => X.b}
#                   case tuple:
#                     #m = (map<string, json.Data>){->}
#                     #m = (json.Data){->}
#                     m = (map<string, any>){->}
#                     for (i in X) {
#                       if (! (i[0] ?< string)) {
#                         io.writeln('XXX', i[0], 'XXX')
#                         std.error('^ is not a string')
#                       }
#                       m[i[0]] = i[1]
#                     }
#               #io.writeln('XXXX_map', m)
#               #io.writeln()
#                     return m
#                   #case Locale:
#                   case enum:
#                     return ((string)X)[1:]
#                   case time.DateTime:
#                     # ISO 8601 (2014-10-13T00:38:17+00:00)
#                     s = X.format('%Y-%m-%dT%H:%M:%S%:z')
#               #io.writeln('XXXX_datetime', s)
#                     #return X.format('%Y-%m-%dT%H:%M:%S%:z')
#                     return s
#                   default:
#                     s = 'UNKNOWN_TYPE'
#               #io.writeln('XXXX_unknowntype', s)
#                     return s
#                 }
#                 #return 0 # dummy return
#               })
"
}
