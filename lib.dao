load sync
load time import time
load os

namespace lib { mkrel, localized_time_format }
namespace html_page {}

var mutex_locale = sync.Mutex()

routine localized_time_format(invar locale: string,
    invar t: time.DateTime, invar pattern: string) => string {
  mutex_locale.lock()
  defer { mutex_locale.unlock() }
  old = os.setlocale($time)
  defer { os.setlocale($time, old) }
  os.setlocale($time, locale)
  return t.format(pattern)
}

routine mkrel(from: string, invar target: string) => string {
  # FIXME assert that paths are normalized (can't use fs.realpath(), because
  #   it requires file existence)
  if (from  [0] != '/'[0]) std.error('"from" is not a full path')
  if (from [-1] != '/'[0]) from += '/'
  if (target[0] != '/'[0]) {
    if (target.match('^[^:/]+') == none)
      std.error('"target" is not a full path nor URI')
    else
      return target
  }

  shared = 1  # /
  while (1) {
    x = target[shared:].fetch('[^/]+')
    y = from[shared:].fetch('[^/]+')
    if (%x && x == y)
      shared += %x +1  # +1 for /
    else
      break
  }
  return from[shared:].change('[^/]+', '..') + target[shared:]
}
