#!/usr/bin/env dao

# FIXME remove the span between page links in the stripe
# FIXME prednasejici - jmeno + fce
# FIXME change \n for <br> in the some descriptions/requirements/... (e.g. Tomas Tomecek)
# FIXME add links to other open* project sites in Brno (industra etc.)
# FIXME add possibility to CRUD operations for the registration items
# FIXME add team.html#jpacner

load os.fs
# FIXME namespace is fully imported - how come?
load lib
load config import configuration
load translations import translation

# IAR (Individually Addressable Resource) generators
# FIXME read it with a loop
load iar_gens.home
load iar_gens.rss
load iar_gens.partner_benefits
load iar_gens.partner_home
#load iar_gens.partner_how
load iar_gens.partner_media
#load iar_gens.partner_who
load iar_gens.partner_why_we
load iar_gens.speaker_about
load iar_gens.speaker_benefits
load iar_gens.speaker_home
load iar_gens.speaker_media
load iar_gens.speaker_venue
load iar_gens.speaker_info
load iar_gens.visitor_about
load iar_gens.visitor_home
load iar_gens.visitor_media
load iar_gens.visitor_venue
load iar_gens.visitor_program
load iar_gens.visitor_speakers
load iar_gens.css
load iar_gens.redir_call_for_proposals
load iar_gens.redir_cfp_form
load iar_gens.redir_cfp
load iar_gens.redir_feed
load iar_gens.redir_index

# FIXME add the relative/absolute path info to the IAR itself?
#   aka "How to solve routing in a decentralized way?"
#   probably make each page an object with a specified interface
invar iars = {
  # relative paths (usually need to be localized)
  'home'             -> 'home.html',
  'partner_benefits' -> 'partner_benefits.html',
  'partner_home'     -> 'partner_home.html',
#  'partner_how'      -> 'partner_how.html',
  'partner_media'    -> 'partner_media.html',
#  'partner_who'      -> 'partner_who.html',
  'partner_why_we'   -> 'partner_why_we.html',
  'speaker_about'    -> 'speaker_about.html',
  'speaker_benefits' -> 'speaker_benefits.html',
  'speaker_home'     -> 'speaker_home.html',
  'speaker_media'    -> 'speaker_media.html',
  'speaker_venue'    -> 'speaker_venue.html',
  'speaker_info'     -> 'speaker_info.html',
  'visitor_about'    -> 'visitor_about.html',
  'visitor_home'     -> 'visitor_home.html',
  'visitor_media'    -> 'visitor_media.html',
  'visitor_venue'    -> 'visitor_venue.html',
  'visitor_program'  -> 'visitor_program.html',
  'visitor_speakers' -> 'visitor_speakers.html',
  'rss'              -> 'feed.rss',

  # absolute paths
  'css'                      -> conf.uri.css,
  'redir_index'              -> conf.uri.redir_index,
  'redir_call_for_proposals' -> conf.uri.redir_call_for_proposals,
  'redir_cfp_form'           -> conf.uri.redir_cfp_form,
  'redir_cfp'                -> conf.uri.redir_cfp,
  'redir_feed'               -> conf.uri.redir_feed,
}

routine gen_iars(invar iars: map<string, string>, invar trans: lib.Locale) {
  invar dst = conf.resdir / ((string)trans)[1:]
  if (! fs.exists(dst)) fs.mkdir(dst)

  for (r in iars) {
    if (! isrel(r[1])) skip

    fut = std.exec {
      # FIXME use one-liner using meta?
      switch (r[0]) {
        case 'home':
          return iar::home(             r[0], dst / r[1], trans, dst, iars, $initial) !!
        case 'partner_benefits':
          return iar::partner_benefits( r[0], dst / r[1], trans, dst, iars, $partner) !!
        case 'partner_home'    :
          return iar::partner_home(     r[0], dst / r[1], trans, dst, iars, $partner) !!
#        case 'partner_how'     :
#          return iar::partner_how(      r[0], dst / r[1], trans, dst, iars, $partner) !!
        case 'partner_media'   :
          return iar::partner_media(    r[0], dst / r[1], trans, dst, iars, $partner) !!
#        case 'partner_who'     :
#          return iar::partner_who(      r[0], dst / r[1], trans, dst, iars, $partner) !!
        case 'partner_why_we'  :
          return iar::partner_why_we(   r[0], dst / r[1], trans, dst, iars, $partner) !!
        case 'speaker_about'   :
          return iar::speaker_about(    r[0], dst / r[1], trans, dst, iars, $speaker) !!
        case 'speaker_benefits':
          return iar::speaker_benefits( r[0], dst / r[1], trans, dst, iars, $speaker) !!
        case 'speaker_home'    :
          return iar::speaker_home(     r[0], dst / r[1], trans, dst, iars, $speaker) !!
        case 'speaker_media'   :
          return iar::speaker_media(    r[0], dst / r[1], trans, dst, iars, $speaker) !!
        case 'speaker_venue'   :
          return iar::speaker_venue(    r[0], dst / r[1], trans, dst, iars, $speaker) !!
        case 'speaker_info'   :
          return iar::speaker_info(     r[0], dst / r[1], trans, dst, iars, $speaker) !!
        case 'visitor_about'   :
          return iar::visitor_about(    r[0], dst / r[1], trans, dst, iars, $visitor) !!
        case 'visitor_home'    :
          return iar::visitor_home(     r[0], dst / r[1], trans, dst, iars, $visitor) !!
        case 'visitor_media'   :
          return iar::visitor_media(    r[0], dst / r[1], trans, dst, iars, $visitor) !!
        case 'visitor_venue'   :
          return iar::visitor_venue(    r[0], dst / r[1], trans, dst, iars, $visitor) !!
        case 'visitor_program' :
          return iar::visitor_program(  r[0], dst / r[1], trans, dst, iars, $visitor) !!
        case 'visitor_speakers' :
          return iar::visitor_speakers( r[0], dst / r[1], trans, dst, iars, $visitor) !!
      }

      std.assert(r[0] == 'rss')
      return iar::rss(                 r[0], dst / r[1], trans, dst, iars, $initial) !!
    }

    defer { fut.value() }
  }
}

# USAGE: generate.dao [<translation>]...
#   if no translations given, generate all
routine main(...: Locale as args) {
  invar chosen_trans = std.exec {
    if (%args)
      return translations.associate(1) {
        if (X in args)
          return (X, Y)
        else
          return none
      }
    else
      return translations
  }

  # FIXME propagate the chosen translations to every single function
  #   dealing translations!

  # generate IARs which need translation
  for (trans in chosen_trans) {
    fut = gen_iars(iars, trans[0]) !!
    defer { fut.value() }
  }

  # generate other IARs
  for (r in iars) {
    if (isrel(r[1])) skip

    fut = std.exec {
      # FIXME use one-liner using meta?
      switch (r[0]) {
        case 'css':
          return iar::css(                     r[0], r[1], iars, $initial) !!
        case 'redir_index':
          return iar::redir_index(             r[0], r[1], iars, $initial) !!
        case 'redir_call_for_proposals':
          return iar::redir_call_for_proposals(r[0], r[1], iars, $initial) !!
        case 'redir_cfp_form':
          return iar::redir_cfp_form(          r[0], r[1], iars, $initial) !!
        case 'redir_cfp':
          return iar::redir_cfp(               r[0], r[1], iars, $initial) !!
      }

      std.assert(r[0] == 'redir_feed')
      return iar::redir_feed(                  r[0], r[1], iars, $initial) !!
    }

    defer { fut.value() }
  }

  return 0
}
