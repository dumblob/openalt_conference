#!/usr/bin/env dao

# FIXME remove the span between page links in the stripe
# FIXME prednasejici - jmeno + fce
# FIXME change \n for <br> in the some descriptions/requirements/... (e.g. Tomas Tomecek)
# FIXME add links to other open* project sites in Brno (industra etc.)
# FIXME add possibility to CRUD operations for the registration items
# FIXME add thorough accommodation info
# FIXME add team.html#jpacner

load os.fs
# FIXME namespace is fully imported - how come?
load lib
load config import configuration
load translations import translation

# IAR (Individually Addressable Resource) generators
# FIXME remove "import iar" and use iar:: instead of iar_ in iar_func_name()
load iar_gens.home                     import iar
load iar_gens.about                    import iar
load iar_gens.gallery                  import iar
load iar_gens.contact                  import iar
load iar_gens.talks                    import iar
load iar_gens.workshops                import iar
load iar_gens.rss                      import iar
load iar_gens.css                      import iar
load iar_gens.redir_call_for_proposals import iar
load iar_gens.redir_cfp_form           import iar
load iar_gens.redir_cfp                import iar
load iar_gens.redir_feed               import iar

invar iars = {
  # relative paths
  'home'      -> 'home.html',
  'about'     -> 'about.html',
  'gallery'   -> 'gallery.html',
  'contact'   -> 'contact.html',
  'talks'     -> 'talks.html',
  'workshops' -> 'workshops.html',
  'rss'       -> 'feed.rss',

  # absolute paths
  'css'                      -> conf.uri.css,
  'redir_call_for_proposals' -> conf.uri.redir_call_for_proposals,
  'redir_cfp_form'           -> conf.uri.redir_cfp_form,
  'redir_cfp'                -> conf.uri.redir_cfp,
  'redir_feed'               -> conf.uri.redir_feed,
}

routine gen_iars(invar iars: map<string, string>, invar trans: lib.Locale) {
  invar dst = conf.resdir / ((string)trans)[1:]
  if (! fs.exists(dst)) fs.mkdir(dst)

  for (r in iars) {
    if (! isrel(r[1]) ) skip

    fut = std.exec {
      # FIXME use one-liner using meta?
      switch (r[0]) {
        case 'home':
          return iar_home(     r[0], dst / r[1], trans, dst, iars) !!
        case 'about':
          return iar_about(    r[0], dst / r[1], trans, dst, iars) !!
        case 'gallery':
          return iar_gallery(  r[0], dst / r[1], trans, dst, iars) !!
        case 'contact':
          return iar_contact(  r[0], dst / r[1], trans, dst, iars) !!
        case 'talks':
          return iar_talks(    r[0], dst / r[1], trans, dst, iars) !!
        case 'workshops':
          return iar_workshops(r[0], dst / r[1], trans, dst, iars) !!
      }

      std.assert(r[0] == 'rss')
      return iar_rss(          r[0], dst / r[1], trans, dst, iars) !!
    }

    defer { fut.value() }
  }
}

# USAGE: generate.dao [<translation>]...
#   if no translations given, generate all
#routine main(invar ...: string as args) {
routine main(...: Locale as args) {
  # FIXME bug?
  #defer (any) { return 0 }

  invar chosen_trs = std.exec {
    # FIXME
    if (%args)
      return translations.associate(1) {
        if (X in args)
          return (X, Y)
        else
          return none
      }
    else
      return translations
  }

  # generate IARs which need translation
  for (trans in chosen_trs) {
    fut = gen_iars(iars, trans[0]) !!
    defer { fut.value() }
  }

  # generate other IARs
  for (r in iars) {
    if ( isrel(r[1]) ) skip

    fut = std.exec {
      # FIXME use one-liner using meta?
      switch (r[0]) {
        case 'css':
          return iar_css(                     r[0], r[1], iars) !!
        case 'redir_call_for_proposals':
          return iar_redir_call_for_proposals(r[0], r[1], iars) !!
        case 'redir_cfp_form':
          return iar_redir_cfp_form(          r[0], r[1], iars) !!
        case 'redir_cfp':
          return iar_redir_cfp(               r[0], r[1], iars) !!
      }

      std.assert(r[0] == 'redir_feed')
      return iar_redir_feed(                  r[0], r[1], iars) !!
    }

    defer { fut.value() }
  }
}
